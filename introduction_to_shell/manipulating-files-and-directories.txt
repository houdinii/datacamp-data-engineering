Commands:
+ pwd - (P)rint (W)orking (D)irectory - Prints the absolute path of your current working directory, where shell runds commands and looks
  for files by default.

+ ls - (L)i(s)ting - Lists the contents of the current working directory.
    + -R Recursivly print everything under directory
    + -F Prints a / after the name of every directory and a * after the name of every runnable program


+ cd - (C)hange (D)irectory - Change directory using absolute or relative paths.
    + Includes '..' which moves up one directory

+ cp - (C)o(p)y - cp original.txt duplicate.txt - Copies files

+ mv - (M)o(v)e - mv origin.txt destination.txt - Moves files / Renames files

+ rm - (R)e(m)ove - rm {list of files separated by space} (-r recursive... i.e. remove directory)

+ rmdir - (R)e(m)ove(dir)ectory - Just like rm -r, it deletes directories.

+ cat - Con(cat)enate - Concatenates a list of files and outputs contents to screen

+ less - Paginate cat's output - less {list of files}
    + Spacebar - Next line
    + :n - next file
    + :q - quit

+ head/tail - head/tail {file} - prints first 10 lines of file.
    + -n XX number of lines to display

+ which - which {command} - Prints installation location of command (or nothing if it doesn't exist)

+ man - (Man)ual - Disply help text

+ cut - Remove sections from each line of files (select colomns from a file instead of row like head/tail)
    + -f X-y  Fields, i.e. columns, to select
    + -d ,    Delimeter, comma in this case
    + Example: cut -f 2-5,8 -d , values.csv

+ history - Prints a list of commands you have run recently. Typing !55 will re-run command 55, !head will run the last head
  command ran.

+ grep - Selects lines according to what they contain. grep {search} {filename}. Can also pattern match.
    + -c Prints count of matching lines rather than lines themselves
    + -h Do not print the names of files when searching multiple files.
    + -i Ignore case (e.g., treat "Regression" and "regression" as the same thing)
    + -l Print the names of files that contain matches, not the matches themselves.
    + -n Print line numbers for matching lines
    + -v Invert the match, i.e. only show lines that don't match

+ >  - Moves output to somewhere else, ex.  tail seasonal/winter.csv > last.csv

+ |  - Pipe command - Pipes output to next command, i.e  head -n 5 seasonal/summer.csv | tail -n 3

+ wc - (W)ord (C)ount - Prints the number of characters, words, and lines in a file.
    + -c Print only character count
    + -w Print only word count
    + -l Print only line count

+ WILDCARDS:
    + * - Matches any character
    + ? - matches a single character, so 201?.txt will match 2017.txt or 2018.txt, but not 2017-01.txt.
    + [...] - Matches any one of the characters inside the square brackets, so 201[78].txt matches 2017.txt or 2018.txt,
      but not 2016.txt.
    + {...} - Matches any of the comma-separated patterns inside the curly brackets, so {*.txt, *.csv} matches any file whose name
      ends with .txt or .csv, but not files whose names end with .pdf.

+ sort - Puts data in order, alphabetical by default.
    + -n Sort numerically
    + -r Sort in reverse
    + -b Ignore leading blanks
    + -f Fold case (ignore case)

+ uniq - Removes ADJACENT duplicated lines
    + -c Return counts instead of the lines themselves.

Variables:
Environment Variables - variables available all of the time, conventionally UPPERCASE NAMES. Some common envs:
Normal Variables -  varname=value_of_var_name

Variable    Purpose                         Value
----------------------------------------------------------------
HOME        User's Home Directory           /home/repl
PWD         Present Working Directory       Same as pwd command
SHELL       Which shell program is used     /bin/bash
USER        User's ID                       repl

+ echo - Echos to screen. To echo a variable: echo $VARNAME

+ for loops - Example: for filetype in gif jpg png; do echo $filetype; done

Nano:
nano filename - edits filename in nano editor. Some hotkeys:
    + Ctrl-k    Delete a line
    + Ctrl-u    Undelete a line
    + Ctrl-O    Save the file / (O)utput to file
    + Ctrl-x    Exit the editor

Bash Scripts:
to run a script: bash {filename.sh}
to use passed in arguements, use the $@, which means all the command-line parameters given to script.
to access individual arguments, use $1, $2, etc