------------------------------------------------
|   Database Operations on the Command Line:   |
------------------------------------------------

Pulling Data From Database:
============================


sql2csv:
========
+ executes an SQL query on a large variety of SQL databases (e.g. MSSQL, MySQL, Oracle, PostgreSQL, Sqlite)
+ outputs result as csv file.

Documentation:
    sql2csv -h

Syntax:
    sql2csv --db "connection_string" -- query "SQL QUERY HERE" > output.csv

Example:
    sql2csv --db "sqlite:///SpotifyDatabase.db" --query "SELECT * FROM Spotify_Popularity" > Spotify_Popularity.csv

Step By Step:
    1.) Establish the database connection:
        + --db is followed by the database connection string
        + SQLite: starts with sqlite:/// and ends in .db (usually)
        + PostgreSQL & MySQL: starts with postgres:/// or mysql:/// and has no .db at end.
    2.) Querying against the database:
        + --query is followed by the SQL query string
        + Use SQL syntax compatible with the database.
        + Write query in one line with no line breaks.
    3.) Saving the output:
        + >: Re-directs output to new local CSV file.
        + Otherwise, will only print query results to console.


csvsql: documentation
=====================
csvsql:
+ applies SQL statements to one or more CSV file
+ creates an in-memory SQL database that temporarily hosts the file being processed
+ suitable for small to medium files only

Sample Syntax:
    csvsql --query "SELECT * FROM Spotify_MusicAttributes LIMIT 1" Spotify_MusicAttributes.csv

Another Sample:
    csvsql --query "SELECT * FROM Spotify_MusicAttributes LIMIT 1" data/Spotify_MusicAttributes.csv | csvlook

One More:
    csvsql --query "SELECT * FROM Spotify_MusicAttributes LIMIT 1" data/Spotify_MusicAttributes.csv > OneSongFile.csv


csvsql: joining CSVs using SQL syntax
=====================================

Syntax:
    csvsql --query "SELECT * FROM file_a INNER JOIN file_b..." file_a.csv file_b.csv

Notes:
+ SQL Query must be written in one line, no breaks.
+ Indicate CSV files in order of appearance in SQL.


Pushing Data Back To Database:
==============================

csvsql:
+ Also executes SQL statements directly on the database.
+ Supports both creating tables and inserting data.
+ More option arguments:
    + --insert
    + --db
    + --no-inference   Disable type inference when parsing the input.
    + --no-constraints Generate a schema without length limits or null checks.

Sample Syntax:
    csvsql --db "sqlite:///SpotifyDatabase.db" \
           --insert Spotify_MusicAttributes.csv

    Notes:
    1. Line break is used to keep code clean and readable.
    2. Use three forward slashes to initiate database name.
    3. End with file extension .db for SQLITE database.
    4. If you know your data will have a numbers column that should rather be treated as a text column, use the
       option no-inference.
    5. If you have particularly large data tables and want to sonsiderably speed up the insertion process, use the
       option no-constraints. This also allows you to create columns containing all null data without throwing errors.

Documentation:
    csvsql -h
    --insert In addition to creating the table, also insert the
             data into the table. Only valid when --db is specified.




























