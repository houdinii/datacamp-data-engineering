 /---------------------------------\
|    Variables In Bash Scripting    |
 \---------------------------------/

Master the bread and butter of Bash scripts—variables! In this chapter, you’ll learn how to create basic string and
numeric variables, and perform calculations on these variables. You’ll also learn about the magic of a
shell-within-a-shell (shell-ception), opening up huge opportunities for advanced scripting.

Basic Variables in Bash
========================
------------------------

Assigning Variables
-------------------
Similar to other languages, you can assign variables with the equals notion.
    var1="Moon"
The reference with $ notation.
    echo $var1


Assigning String Variables:
---------------------------
Name your variable as you like (something sensible!):
    firstname='Cynthia'        <<< NOTE NO SPACES!!!
    lastname='Liu'
    echo "Hi there: " $firstname $lastname


Single, Double, Backticks
-------------------------
In Bash, using different quotation marks can mean different things. Both when creating
variables and printing.
+ Single quotes('sometext') = Shell interprets what is between literally.
+ Double quotes("sometext") = Shell interprets literally EXCEPT using $ and backticks
The last way creates a 'shell-within-a-shell', outlined below. Useful for calling command-line
programs. This is done with backticks.
+ Backticks(`sometext`) = Shell runs the command and captures STDOUT back into a variable.


Different Variable Creation
---------------------------
Let's see the effect of different types of variable creation:
    now_var='NOW'
    now_var_singlequote='$now_var'
    echo $now_var_single_quote
    >>> $now_var

    now_var_doublequote="$now_var"
    echo $now_var_doublequote

The Date Program
----------------
The Date program will be useful for demonstrating backticks. Normal output example:
    date
    >>> Mon  2 Dec 2019 14:07:10 AEDT


Shell Within A Shell
--------------------
Let's use the shell-within-a-shell now:
    rightnow_doublequote="The date is `date`."
    echo $rightnow_doublequote
    >>> The date is Mon  2 Dec 2019 14:07:10 AEDT.


Parentheses vs Backticks:
-------------------------
There is an equivalent to backtick notation:
    rightnow_doublequote="The date is `date`."
    rightnow_parentheses="The date is $(date)."
    echo rightnow_doublequote
    echo rightnow_parentheses
Both work the same though using backticks is older. Parenthesis is used in more modern applications.



Numeric Variables in Bash
========================
------------------------

Numbers in other languages
--------------------------
Numbers are not built in natively to the shell like most REPLs (console) such as R and Python.
Instead, we use the utility program expr, which is another command like cat or grep.
    expr 1 + 4
    >>> 5


expr Limitations:
-----------------
expr cannot natively handle decimal places:
    expr 1 + 2.5
    >>> expr: not a decimal number: '2.5'

For this we would use bc (basic calculator).
    bc
    >>>
        bc 1.06
        Copyright  ...., inc.
        This is free sof..... WARRANTY.
        For details type 'warranty'.
        5 + 7
        12
        quit


Getting Numbers to bc:
----------------------
Using bc without opening the calculator is possible by piping:
    echo "5 + 7.5" | bc
    >>> 12.5


bc Scale Argument:
------------------
bc also has a scale argument for how many decimal places.
    echo "10 / 3" | bc
    >>> 3

    echo "scale=3; 10 / 3" | bc
    >>> 3.333


Numbers in Bash Scripts:
------------------------
We can assign numeric variables just like string variables:
    dog_name='Roger'
    dog_age=6    # NOTE LACK OF QUOTES!!!
    echo "My dog's name is $dog_name and he is $dog_age years old"
    >>> My dog's name is Roger and he is 6 years old


Double Bracket Notation:
------------------------
A variant on single bracket variable notation for numeric variables:
    expr 5 + 7
    >>> 12
    echo $((5 + 7))
    >>> 12
Beware that this method uses expr, not bc, so no decimals.


Shell Within A Shell Revisited:
-------------------------------
Remember how we called out to the shell in the previous lesson?
Very useful for numeric variables:
    model1=87.65
    model2=89.20
    echo "The total score is $(echo "$model1 + $model2" | bc)"
    echo "The average score is $(echo "($model1 + $model2) / 2" | bc)"

    >>> The total score is 176.85
    >>> The average score is 88


Arrays in Bash
========================
------------------------

What is an array?
Two types of arrays in Bash:
+ An Array
  + 'Normal' numerical-indexed structure.
  + Called a 'list' in Python or 'vector' in R.
In Python: my_list = [1,2,3,4]
In R: my_vector <- c(1,2,3,4)

Creating an Array in Bash:
--------------------------
Creation of a numerical-indexed can be done in two ways in Bash:
1.) Declare without adding elements:
    declare -a my_first_array
2.) Create and add elements at the same time:
    my_first_array=(1 2 3)
REMEMBER: NO SPACES AROUND THE EQUAL SIGN AND NO COMMAS BETWEEN ARRAY ELEMENTS!!!


Important Array Properties:
---------------------------
All array elements can be returned using array[@]. Though do note, Bash requires curly
brackets around the array name when you want to access these properties.
    my_array=(1 3 5 2)
    echo ${my_array[@]}
    >>>> 1 3 5 7

The length of an array is accessed using #array[@]
    echo ${my_array[@]}
    >>> 4


Manipulating Array Elements
---------------------------
Accessing array elements using square brackets.
    my_first_array=(15 20 300 42)
    echo ${my_first_array[2]}
    >>> 300
Remember: Bash uses zero-indexing for arrays like Python (but unlike R!)


Manipulating Array Elements:
----------------------------
Set array elements using the index notation.
    my_first_array=(15 20 300 42 23 2 4 33 54 67 66)
    my_first_array[0]=999
    echo ${my_first_array[0]}
    >>> 999
Remember: don't use the $ when overwriting an index such as $my_first_array[0]=999, as this won't work!!!

Use the notation array[@]:N:M to 'slice' out a subset of an array.
Here N is the starting index and M is how many elements to return.
    my_first_array=(5 20 300 42 23 2 4 33 54 67 66)
    echo ${my_first_array[@]:3:2}
    >>> 42 23


Appending to Arrays:
--------------------
Append to an array using array+=(elements).
For examples:
    my_array=(300 42 23 2 4 33 54 67 66)
    my_array+=(10)  # DO NOT FORGET THE PARENTHESIS!!!
    echo ${my_array[@]}
    >>> 300 42 23 2 4 33 54 67 66 10


Associative Arrays:
-------------------
An associative array:
+ Similar to a normal array, but with key-value pairs, not numerical indexes.
+ Similar to Python's dictionary or R's list
+ Note: This is only available in Bash 4 onwards. Some modern macs have old Bash! Check with bash --version in terminal.

In Python:
    my_dict = {'city': "New York", 'population', 14000000}
In R:
    my_list = list(city = c('New York'), population = c(14000000))


Creating an associative array:
------------------------------
You can only create an associative array using the declare syntax (and uppercase -A).
You can either declare first, then add elements or do it all on one line.
+ Surround 'keys' in square brackets, then associate a value after the equals sign.
   + You may add multiple elements at once.


An Example:
-----------
    declare -A city_details                                # Declare first
    city_details=([city]="New York" [population]=14000000) # Add elements
    echo ${city_details[city]}                             # Index using key to return a value
    >>> New York

Alternatively, create an associative array and assign in one line:
+ Everything else is the same:
    declare -A city_details=([city]="New York" [population]=14000000)
+ Access the 'keys' of an associative array with an !
    echo ${!city_details[@]} # return all the keys
    >>> city population
